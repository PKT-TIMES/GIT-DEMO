AUTOMATION FOR THE ACCESS LIST EXPOSE SSH TO PUBLIC::-
************************************************************


ec2.tf
********
resource "aws_instance" "my_ec2_instance" {
  ami                    = var.aws_ami_id
  instance_type          = "t2.micro"
  key_name               = "mykey"
  count                  = length(var.subnets_cidr)
  subnet_id              = element(aws_subnet.main.*.id, count.index)
  vpc_security_group_ids = [aws_security_group.mysecuritygroup.id]
  tags = {
    "Name" = "my-ec2.${count.index+1}"
  }
}




vpc.tf
********

resource "aws_vpc" "myvpu-demo" {
  cidr_block       = var.vpc_cidr

  tags = {
    Name = "myvpc"
  }
}
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.myvpu-demo.id

  tags = {
    Name = "igw"
  }
}
resource "aws_subnet" "main" {
  count = length(var.subnets_cidr)
  vpc_id     = aws_vpc.myvpu-demo.id
  cidr_block = element(var.subnets_cidr , count.index)
  availability_zone = element(var.azs , count.index)
  map_public_ip_on_launch = "true"
  tags = {
    Name = "Subnet-${count.index +1}"
  }
}
resource "aws_route_table" "RT" {
  vpc_id = aws_vpc.myvpu-demo.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
  tags = {
    Name = "mypublicRT"
  }
}
resource "aws_route_table_association" "RTA" {
  count = length(var.subnets_cidr)
  subnet_id      = element(aws_subnet.main.*.id, count.index)
  route_table_id = aws_route_table.RT.id
}

provider.tf
**************
provider "aws" {
  region     = var.aws_region
  profile    = "<your_profile_name>"
}


sg.tf
*******
resource "aws_security_group" "mysecuritygroup" {
  name   = "mysg"
  vpc_id = aws_vpc.myvpu-demo.id
  dynamic "ingress" {
    for_each = var.sgports
    content {
      from_port   = ingress.value
      to_port     = ingress.value
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
resource "aws_security_group_rule" "tcp_removal" {
  count = var.remove_tcp_rule ? 1 : 0

  security_group_id = aws_security_group.mysecuritygroup.id
  
  type        = "ingress"
  from_port   = 65535
  to_port     = 65535
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
  lifecycle {
    create_before_destroy = true
  }
}


variable.tf
**************
variable "aws_region"{    
}

variable "vpc_cidr" {
    default = "10.0.0.0/16"
}
variable "subnets_cidr" {
    type = list
    default = [ "10.0.1.0/24", "10.0.2.0/24"]
}
variable "azs" {
    type = list
    default = ["ap-south-1a" , "ap-south-1b" ]
}
variable "sgports" {
   type = list
   default = [ 80,443]
}
variable "aws_ami_id" {
  default = "ami-00952f27cf14db9cd"
}
variable "remove_tcp_rule" {
  type    = bool
  description = "remove security group rule"
}



terrform.tfvars
*****************
aws_region = "ap-south-1"

